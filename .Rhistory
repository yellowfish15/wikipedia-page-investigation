geom_point(color = "blue", alpha = 0.6) +  # Scatter plot with blue points
geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +  # Linear regression line
labs(title = "Scatter Plot Log(X) vs Page Views",
x = "Log(X)",
y = "Page Views") +  # Update y-axis label to reflect the log transformation
theme_minimal() +  # Use a clean theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
axis.title = element_text(size = 12),    # Adjust axis title size
axis.text = element_text(size = 10)      # Adjust axis text size
) +
# Add the regression equation and R-squared value to the plot
annotate("text", x = max(log(data$links_count))*0.7, y = max(data$page_views)*0.7,
label = paste("y =", round(coef(model)[1], 2), "+",
round(coef(model)[2], 2), "* x\nR^2 =",
round(summary(model)$r.squared, 6)),
color = "red", size = 5, hjust = 0)
# Load required libraries
library(ggplot2)
# Read the data from the CSV file
setwd("C:/Users/conta/Downloads/Intro to Statistics/wikipedia-page-investigation/")
data <- read.csv("raw_data.csv")
# Replace 0 values with a small value (e.g., 1) to avoid issues with log(0)
data$page_views[data$page_views == 0] <- 1
# Perform linear regression: Predict log-transformed page_views based on links_count
model <- lm(log(data$page_views) ~ links_count, data = data)
# Create the scatter plot of links_count vs log-transformed page_views
ggplot(data, aes(x = data$links_count, y = log(data$page_views))) +
geom_point(color = "blue", alpha = 0.6) +  # Scatter plot with blue points
geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +  # Linear regression line
labs(title = "Scatter Plot vs Log-Transformed Page Views",
x = "X",
y = "Log(Page Views)") +  # Update y-axis label to reflect the log transformation
scale_y_continuous(trans = "log10") +  # Apply log scale to y-axis
theme_minimal() +  # Use a clean theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
axis.title = element_text(size = 12),    # Adjust axis title size
axis.text = element_text(size = 10)      # Adjust axis text size
) +
# Add the regression equation and R-squared value to the plot
annotate("text", x = max(data$links_count)*0.7, y = max(log(data$page_views))*0.7,
label = paste("y =", round(coef(model)[1], 2), "+",
round(coef(model)[2], 2), "* x\nR^2 =",
round(summary(model)$r.squared, 2)),
color = "red", size = 5, hjust = 0)
# Load required libraries
library(ggplot2)
# Read the data from the CSV file
setwd("C:/Users/conta/Downloads/Intro to Statistics/wikipedia-page-investigation/")
data <- read.csv("raw_data.csv")
# Replace 0 values with a small value (e.g., 1) to avoid issues with log(0)
data$links_count[data$links_count == 0] <- 1
data$page_views[data$page_views == 0] <- 1
# Fit a linear model to the log-transformed data
model <- lm(log(page_views) ~ log(links_count), data = data)
# Create the scatter plot of log(links_count) vs page_views
ggplot(data, aes(x = log(links_count), y = log(page_views))) +
geom_point(color = "blue", alpha = 0.6) +  # Scatter plot with blue points
geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +  # Linear regression line
labs(title = "Scatter Plot Log(X) vs Page Views",
x = "Log(X)",
y = "Page Views") +  # Update y-axis label to reflect the log transformation
theme_minimal() +  # Use a clean theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
axis.title = element_text(size = 12),    # Adjust axis title size
axis.text = element_text(size = 10)      # Adjust axis text size
) +
# Add the regression equation and R-squared value to the plot
annotate("text", x = max(log(data$links_count))*0.7, y = max(log(data$page_views))*0.7,
label = paste("y =", round(coef(model)[1], 2), "+",
round(coef(model)[2], 2), "* x\nR^2 =",
round(summary(model)$r.squared, 6)),
color = "red", size = 5, hjust = 0)
# Load required libraries
library(ggplot2)
# Read the data from the CSV file
setwd("C:/Users/conta/Downloads/Intro to Statistics/wikipedia-page-investigation/")
data <- read.csv("raw_data.csv")
# Replace 0 values with a small value (e.g., 1) to avoid issues with log(0)
data$links_count[data$links_count == 0] <- 1
# Load required libraries
library(ggplot2)
# Read the data from the CSV file
setwd("C:/Users/conta/Downloads/Intro to Statistics/wikipedia-page-investigation/")
data <- read.csv("raw_data.csv")
# Replace 0 values with a small value (e.g., 1) to avoid issues with log(0)
data$links_count[data$links_count == 0] <- 1
# Load required libraries
library(ggplot2)
# Read the data from the CSV file
setwd("C:/Users/conta/Downloads/Intro to Statistics/wikipedia-page-investigation/")
data <- read.csv("raw_data.csv")
# Replace 0 values with a small value (e.g., 1) to avoid issues with log(0)
data$back_links_count[data$back_links_count == 0] <- 1
data$page_views[data$page_views == 0] <- 1
# Fit a linear model to the log-transformed data
model <- lm(log(page_views) ~ log(back_links_count), data = data)
# Create the scatter plot of log(back_links_count) vs page_views
ggplot(data, aes(x = log(back_links_count), y = log(page_views))) +
geom_point(color = "blue", alpha = 0.6) +  # Scatter plot with blue points
geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +  # Linear regression line
labs(title = "Scatter Plot Log(X) vs Page Views",
x = "Log(X)",
y = "Page Views") +  # Update y-axis label to reflect the log transformation
theme_minimal() +  # Use a clean theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
axis.title = element_text(size = 12),    # Adjust axis title size
axis.text = element_text(size = 10)      # Adjust axis text size
) +
# Add the regression equation and R-squared value to the plot
annotate("text", x = max(log(data$back_links_count))*0.7, y = max(log(data$page_views))*0.7,
label = paste("y =", round(coef(model)[1], 2), "+",
round(coef(model)[2], 2), "* x\nR^2 =",
round(summary(model)$r.squared, 6)),
color = "red", size = 5, hjust = 0)
# Load required libraries
library(ggplot2)
# Read the data from the CSV file
setwd("C:/Users/conta/Downloads/Intro to Statistics/wikipedia-page-investigation/")
data <- read.csv("raw_data.csv")
# Replace 0 values with a small value (e.g., 1) to avoid issues with log(0)
data$page_views[data$page_views == 0] <- 1
# Perform linear regression: Predict log-transformed page_views based on back_links_count
model <- lm(log(data$page_views) ~ back_links_count, data = data)
# Create the scatter plot of back_links_count vs log-transformed page_views
ggplot(data, aes(x = data$back_links_count, y = log(data$page_views))) +
geom_point(color = "blue", alpha = 0.6) +  # Scatter plot with blue points
geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +  # Linear regression line
labs(title = "Scatter Plot vs Log-Transformed Page Views",
x = "X",
y = "Log(Page Views)") +  # Update y-axis label to reflect the log transformation
scale_y_continuous(trans = "log10") +  # Apply log scale to y-axis
theme_minimal() +  # Use a clean theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
axis.title = element_text(size = 12),    # Adjust axis title size
axis.text = element_text(size = 10)      # Adjust axis text size
) +
# Add the regression equation and R-squared value to the plot
annotate("text", x = max(data$back_links_count)*0.7, y = max(log(data$page_views))*0.7,
label = paste("y =", round(coef(model)[1], 2), "+",
round(coef(model)[2], 2), "* x\nR^2 =",
round(summary(model)$r.squared, 2)),
color = "red", size = 5, hjust = 0)
# Load required libraries
library(ggplot2)
# Read the data from the CSV file
setwd("C:/Users/conta/Downloads/Intro to Statistics/wikipedia-page-investigation/")
data <- read.csv("raw_data.csv")
# Replace 0 values with a small value (e.g., 1) to avoid issues with log(0)
data$page_views[data$page_views == 0] <- 1
# Perform linear regression: Predict log-transformed page_views based on back_links_count
model <- lm(log(data$page_views) ~ back_links_count, data = data)
# Create the scatter plot of back_links_count vs log-transformed page_views
ggplot(data, aes(x = data$back_links_count, y = log(data$page_views))) +
geom_point(color = "blue", alpha = 0.6) +  # Scatter plot with blue points
geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +  # Linear regression line
labs(title = "Scatter Plot vs Log-Transformed Page Views",
x = "X",
y = "Log(Page Views)") +  # Update y-axis label to reflect the log transformation
scale_y_continuous(trans = "log10") +  # Apply log scale to y-axis
theme_minimal() +  # Use a clean theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
axis.title = element_text(size = 12),    # Adjust axis title size
axis.text = element_text(size = 10)      # Adjust axis text size
) +
# Add the regression equation and R-squared value to the plot
annotate("text", x = max(data$back_links_count)*0.7, y = log(max(data$page_views))*0.7,
label = paste("y =", round(coef(model)[1], 2), "+",
round(coef(model)[2], 2), "* x\nR^2 =",
round(summary(model)$r.squared, 2)),
color = "red", size = 5, hjust = 0)
# Load required libraries
library(ggplot2)
# Read the data from the CSV file
setwd("C:/Users/conta/Downloads/Intro to Statistics/wikipedia-page-investigation/")
data <- read.csv("raw_data.csv")
# Replace 0 values with a small value (e.g., 1) to avoid issues with log(0)
data$page_views[data$page_views == 0] <- 1
# Perform linear regression: Predict log-transformed page_views based on back_links_count
model <- lm(log(data$page_views) ~ back_links_count, data = data)
# Create the scatter plot of back_links_count vs log-transformed page_views
ggplot(data, aes(x = back_links_count, y = log(page_views))) +
geom_point(color = "blue", alpha = 0.6) +  # Scatter plot with blue points
geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +  # Linear regression line
labs(title = "Scatter Plot vs Log-Transformed Page Views",
x = "X",
y = "Log(Page Views)") +  # Update y-axis label to reflect the log transformation
scale_y_continuous(trans = "log10") +  # Apply log scale to y-axis
theme_minimal() +  # Use a clean theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
axis.title = element_text(size = 12),    # Adjust axis title size
axis.text = element_text(size = 10)      # Adjust axis text size
) +
# Add the regression equation and R-squared value to the plot
annotate("text", x = max(back_links_count)*0.7, y = log(max(data$page_views))*0.7,
label = paste("y =", round(coef(model)[1], 2), "+",
round(coef(model)[2], 2), "* x\nR^2 =",
round(summary(model)$r.squared, 2)),
color = "red", size = 5, hjust = 0)
# Load required libraries
library(ggplot2)
# Read the data from the CSV file
setwd("C:/Users/conta/Downloads/Intro to Statistics/wikipedia-page-investigation/")
data <- read.csv("raw_data.csv")
# Replace 0 values with a small value (e.g., 1) to avoid issues with log(0)
data$page_views[data$page_views == 0] <- 1
# Perform linear regression: Predict log-transformed page_views based on back_links_count
model <- lm(log(data$page_views) ~ back_links_count, data = data)
# Create the scatter plot of back_links_count vs log-transformed page_views
ggplot(data, aes(x = data$back_links_count, y = log(page_views))) +
geom_point(color = "blue", alpha = 0.6) +  # Scatter plot with blue points
geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +  # Linear regression line
labs(title = "Scatter Plot vs Log-Transformed Page Views",
x = "X",
y = "Log(Page Views)") +  # Update y-axis label to reflect the log transformation
scale_y_continuous(trans = "log10") +  # Apply log scale to y-axis
theme_minimal() +  # Use a clean theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
axis.title = element_text(size = 12),    # Adjust axis title size
axis.text = element_text(size = 10)      # Adjust axis text size
) +
# Add the regression equation and R-squared value to the plot
annotate("text", x = max(back_links_count)*0.7, y = log(max(data$page_views))*0.7,
label = paste("y =", round(coef(model)[1], 2), "+",
round(coef(model)[2], 2), "* x\nR^2 =",
round(summary(model)$r.squared, 2)),
color = "red", size = 5, hjust = 0)
# Load required libraries
library(ggplot2)
# Read the data from the CSV file
setwd("C:/Users/conta/Downloads/Intro to Statistics/wikipedia-page-investigation/")
data <- read.csv("raw_data.csv")
# Replace 0 values with a small value (e.g., 1) to avoid issues with log(0)
data$page_views[data$page_views == 0] <- 1
# Perform linear regression: Predict log-transformed page_views based on back_links_count
model <- lm(log(data$page_views) ~ back_links_count, data = data)
# Create the scatter plot of back_links_count vs log-transformed page_views
ggplot(data, aes(x = data$back_links_count, y = log(page_views))) +
geom_point(color = "blue", alpha = 0.6) +  # Scatter plot with blue points
geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +  # Linear regression line
labs(title = "Scatter Plot vs Log-Transformed Page Views",
x = "X",
y = "Log(Page Views)") +  # Update y-axis label to reflect the log transformation
scale_y_continuous(trans = "log10") +  # Apply log scale to y-axis
theme_minimal() +  # Use a clean theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
axis.title = element_text(size = 12),    # Adjust axis title size
axis.text = element_text(size = 10)      # Adjust axis text size
) +
# Add the regression equation and R-squared value to the plot
annotate("text", x = max(data$back_links_count)*0.7, y = log(max(data$page_views))*0.7,
label = paste("y =", round(coef(model)[1], 2), "+",
round(coef(model)[2], 2), "* x\nR^2 =",
round(summary(model)$r.squared, 2)),
color = "red", size = 5, hjust = 0)
# Load required libraries
library(ggplot2)
# Read the data from the CSV file
setwd("C:/Users/conta/Downloads/Intro to Statistics/wikipedia-page-investigation/")
data <- read.csv("raw_data.csv")
# Replace 0 values with a small value (e.g., 1) to avoid issues with log(0)
data$page_views[data$page_views == 0] <- 1
# Perform linear regression: Predict log-transformed page_views based on back_links_count
model <- lm(log(data$page_views) ~ back_links_count, data = data)
# Create the scatter plot of back_links_count vs log-transformed page_views
ggplot(data, aes(x = back_links_count, y = log(page_views))) +
geom_point(color = "blue", alpha = 0.6) +  # Scatter plot with blue points
geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +  # Linear regression line
labs(title = "Scatter Plot vs Log-Transformed Page Views",
x = "X",
y = "Log(Page Views)") +  # Update y-axis label to reflect the log transformation
scale_y_continuous(trans = "log10") +  # Apply log scale to y-axis
theme_minimal() +  # Use a clean theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
axis.title = element_text(size = 12),    # Adjust axis title size
axis.text = element_text(size = 10)      # Adjust axis text size
) +
# Add the regression equation and R-squared value to the plot
annotate("text", x = max(data$back_links_count)*0.7, y = log(max(data$page_views))*0.7,
label = paste("y =", round(coef(model)[1], 2), "+",
round(coef(model)[2], 2), "* x\nR^2 =",
round(summary(model)$r.squared, 2)),
color = "red", size = 5, hjust = 0)
# Load required libraries
library(ggplot2)
# Read the data from the CSV file
setwd("C:/Users/conta/Downloads/Intro to Statistics/wikipedia-page-investigation/")
data <- read.csv("raw_data.csv")
# Clean up the data (removing unnecessary quotes around page_title)
data$page_title <- gsub('"', '', data$page_title)
# Fit a linear model (regression) to the data
model <- lm(page_views ~ log(back_links_count), data = data)
# Create the scatter plot of log(back_links_count) vs page_views
ggplot(data, aes(x = log(back_links_count), y = page_views)) +
geom_point(color = "blue", alpha = 0.6) +  # Scatter plot with blue points
geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +  # Linear regression line
labs(title = "Scatter Plot Log(X) vs Page Views",
x = "Log(X)",
y = "Page Views") +  # Update y-axis label to reflect the log transformation
theme_minimal() +  # Use a clean theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
axis.title = element_text(size = 12),    # Adjust axis title size
axis.text = element_text(size = 10)      # Adjust axis text size
) +
# Add the regression equation and R-squared value to the plot
annotate("text", x = max(log(data$back_links_count))*0.7, y = max(data$page_views)*0.7,
label = paste("y =", round(coef(model)[1], 2), "+",
round(coef(model)[2], 2), "* x\nR^2 =",
round(summary(model)$r.squared, 6)),
color = "red", size = 5, hjust = 0)
# Load required libraries
library(ggplot2)
# Read the data from the CSV file
setwd("C:/Users/conta/Downloads/Intro to Statistics/wikipedia-page-investigation/")
data <- read.csv("raw_data.csv")
# Perform linear regression: Predict page_views
model <- lm(page_views ~ data$back_links_count, data = data)
# Create the scatter plot of back_links_count vs page_views
ggplot(data, aes(x = data$back_links_count, y = page_views)) +
geom_point(color = "blue", alpha = 0.6) +  # Scatter plot with blue points
geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +  # Linear regression line
labs(title = "Scatter Plot vs Page Views",
x = "X",
y = "Page Views") +  # Regular y-axis label (no log scale)
theme_minimal() +  # Use a clean theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
axis.title = element_text(size = 12),    # Adjust axis title size
axis.text = element_text(size = 10)      # Adjust axis text size
) +
# Add the regression equation and R-squared value to the plot
annotate("text", x = max(data$back_links_count)*0.7, y = max(data$page_views)*0.7,
label = paste("y =", round(coef(model)[1], 2), "+",
round(coef(model)[2], 2), "* x\nR^2 =",
round(summary(model)$r.squared, 2)),
color = "red", size = 5, hjust = 0)
# Load required libraries
library(ggplot2)
# Read the data from the CSV file
setwd("C:/Users/conta/Downloads/Intro to Statistics/wikipedia-page-investigation/")
data <- read.csv("raw_data.csv")
# Replace 0 values with a small value (e.g., 1) to avoid issues with log(0)
data$back_links_count[data$back_links_count == 0] <- 1
data$page_views[data$page_views == 0] <- 1
# Fit a linear model to the log-transformed data
model <- lm(log(page_views) ~ log(back_links_count), data = data)
# Create the scatter plot of log(back_links_count) vs page_views
ggplot(data, aes(x = log(back_links_count), y = log(page_views))) +
geom_point(color = "blue", alpha = 0.6) +  # Scatter plot with blue points
geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +  # Linear regression line
labs(title = "Scatter Plot Log(X) vs Page Views",
x = "Log(X)",
y = "Page Views") +  # Update y-axis label to reflect the log transformation
theme_minimal() +  # Use a clean theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
axis.title = element_text(size = 12),    # Adjust axis title size
axis.text = element_text(size = 10)      # Adjust axis text size
) +
# Add the regression equation and R-squared value to the plot
annotate("text", x = max(log(data$back_links_count))*0.7, y = max(log(data$page_views))*0.7,
label = paste("y =", round(coef(model)[1], 2), "+",
round(coef(model)[2], 2), "* x\nR^2 =",
round(summary(model)$r.squared, 6)),
color = "red", size = 5, hjust = 0)
# Load required libraries
library(ggplot2)
# Read the data from the CSV file
setwd("C:/Users/conta/Downloads/Intro to Statistics/wikipedia-page-investigation/")
data <- read.csv("raw_data.csv")
# Replace 0 values with a small value (e.g., 1) to avoid issues with log(0)
data$back_links_count[data$back_links_count == 0] <- 1
data$page_views[data$page_views == 0] <- 1
# Calculate IQR for back_links_count and page_views
Q1_backlinks <- quantile(data$back_links_count, 0.25)
Q3_backlinks <- quantile(data$back_links_count, 0.75)
IQR_backlinks <- Q3_backlinks - Q1_backlinks
Q1_pageviews <- quantile(data$page_views, 0.25)
Q3_pageviews <- quantile(data$page_views, 0.75)
IQR_pageviews <- Q3_pageviews - Q1_pageviews
# Define the lower and upper bounds for outlier detection
lower_bound_backlinks <- Q1_backlinks - 1.5 * IQR_backlinks
upper_bound_backlinks <- Q3_backlinks + 1.5 * IQR_backlinks
lower_bound_pageviews <- Q1_pageviews - 1.5 * IQR_pageviews
upper_bound_pageviews <- Q3_pageviews + 1.5 * IQR_pageviews
# Remove outliers based on IQR for both variables
filtered_data <- data[data$back_links_count >= lower_bound_backlinks &
data$back_links_count <= upper_bound_backlinks &
data$page_views >= lower_bound_pageviews &
data$page_views <= upper_bound_pageviews, ]
# Fit a linear model to the log-transformed data of the filtered data
model <- lm(log(page_views) ~ log(back_links_count), data = filtered_data)
# Create the scatter plot of log(back_links_count) vs page_views after removing outliers
ggplot(filtered_data, aes(x = log(back_links_count), y = log(page_views))) +
geom_point(color = "blue", alpha = 0.6) +  # Scatter plot with blue points
geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +  # Linear regression line
labs(title = "Scatter Plot Log(X) vs Page Views (Outliers Removed)",
x = "Log(X)",
y = "Page Views") +  # Update y-axis label to reflect the log transformation
theme_minimal() +  # Use a clean theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
axis.title = element_text(size = 12),    # Adjust axis title size
axis.text = element_text(size = 10)      # Adjust axis text size
) +
# Add the regression equation and R-squared value to the plot
annotate("text", x = max(log(filtered_data$back_links_count)) * 0.7,
y = max(log(filtered_data$page_views)) * 0.7,
label = paste("y =", round(coef(model)[1], 2), "+",
round(coef(model)[2], 2), "* x\nR^2 =",
round(summary(model)$r.squared, 6)),
color = "red", size = 5, hjust = 0)
# Load required libraries
library(ggplot2)
# Read the data from the CSV file
setwd("C:/Users/conta/Downloads/Intro to Statistics/wikipedia-page-investigation/")
data <- read.csv("raw_data.csv")
# Replace 0 values with a small value (e.g., 1) to avoid issues with log(0)
data$back_links_count[data$back_links_count == 0] <- 1
data$page_views[data$page_views == 0] <- 1
# Fit a linear model to the log-transformed data
model <- lm(log(page_views) ~ log(back_links_count), data = data)
# Create the scatter plot of log(back_links_count) vs page_views
ggplot(data, aes(x = log(back_links_count), y = log(page_views))) +
geom_point(color = "blue", alpha = 0.6) +  # Scatter plot with blue points
geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +  # Linear regression line
labs(title = "Scatter Plot Log(X) vs Page Views",
x = "Log(X)",
y = "Page Views") +  # Update y-axis label to reflect the log transformation
theme_minimal() +  # Use a clean theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
axis.title = element_text(size = 12),    # Adjust axis title size
axis.text = element_text(size = 10)      # Adjust axis text size
) +
# Add the regression equation and R-squared value to the plot
annotate("text", x = max(log(data$back_links_count))*0.7, y = max(log(data$page_views))*0.7,
label = paste("y =", round(coef(model)[1], 2), "+",
round(coef(model)[2], 2), "* x\nR^2 =",
round(summary(model)$r.squared, 6)),
color = "red", size = 5, hjust = 0)
max(data$back_links_count
max(data$back_links_count)
max(data$back_links_count)
# Load required libraries
library(ggplot2)
# Read the data from the CSV file
setwd("C:/Users/conta/Downloads/Intro to Statistics/wikipedia-page-investigation/")
data <- read.csv("raw_data.csv")
# Replace 0 values with a small value (e.g., 1) to avoid issues with log(0)
data$back_links_count[data$back_links_count == 0] <- 1
data$page_views[data$page_views == 0] <- 1
# Fit a linear model to the log-transformed data
model <- lm(log(page_views) ~ log(back_links_count), data = data)
# Create the scatter plot of log(back_links_count) vs page_views
ggplot(data, aes(x = log(back_links_count), y = log(page_views))) +
geom_point(color = "blue", alpha = 0.6) +  # Scatter plot with blue points
geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +  # Linear regression line
labs(title = "Scatter Plot Log(X) vs Page Views",
x = "Log(X)",
y = "Page Views") +  # Update y-axis label to reflect the log transformation
theme_minimal() +  # Use a clean theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
axis.title = element_text(size = 12),    # Adjust axis title size
axis.text = element_text(size = 10)      # Adjust axis text size
) +
# Add the regression equation and R-squared value to the plot
annotate("text", x = max(log(data$back_links_count))*0.7, y = max(log(data$page_views))*0.7,
label = paste("y =", round(coef(model)[1], 2), "+",
round(coef(model)[2], 2), "* x\nR^2 =",
round(summary(model)$r.squared, 6)),
color = "red", size = 5, hjust = 0)
# Load required libraries
library(ggplot2)
# Read the data from the CSV file
setwd("C:/Users/conta/Downloads/Intro to Statistics/wikipedia-page-investigation/")
data <- read.csv("raw_data.csv")
# Replace 0 values with a small value (e.g., 1) to avoid issues with log(0)
data$back_links_count[data$back_links_count == 0] <- 1
data$page_views[data$page_views == 0] <- 1
# Fit a linear model to the log-transformed data
model <- lm(log(page_views) ~ log(back_links_count), data = data)
# Create the scatter plot of log(back_links_count) vs page_views
ggplot(data, aes(x = log(back_links_count), y = log(page_views))) +
geom_point(color = "blue", alpha = 0.6) +  # Scatter plot with blue points
geom_smooth(method = "lm", formula = y ~ x, color = "red", se = FALSE) +  # Linear regression line
labs(title = "Scatter Plot Log(X) vs Page Views",
x = "Log(X)",
y = "Page Views") +  # Update y-axis label to reflect the log transformation
theme_minimal() +  # Use a clean theme
theme(
plot.title = element_text(hjust = 0.5),  # Center the title
axis.title = element_text(size = 12),    # Adjust axis title size
axis.text = element_text(size = 10)      # Adjust axis text size
) +
# Add the regression equation and R-squared value to the plot
annotate("text", x = max(log(data$back_links_count))*0.7, y = max(log(data$page_views))*0.7,
label = paste("y =", round(coef(model)[1], 2), "+",
round(coef(model)[2], 2), "* x\nR^2 =",
round(summary(model)$r.squared, 6)),
color = "red", size = 5, hjust = 0)
